
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTEQleftPLUSMINUSleftTIMESDIVIDECOMMA DIVIDE ELSE EQ EQUALS FLOAT_TYPE FOR GT ID IF INT LBRACE LPAREN LT MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMES WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementblock : LBRACE statement_list RBRACEstatement : INT ID EQUALS expression SEMICOLON\n| FLOAT_TYPE ID EQUALS expression SEMICOLONstatement : INT ID SEMICOLON\n| FLOAT_TYPE ID SEMICOLONstatement : ID EQUALS expression SEMICOLONstatement : INT ID LPAREN params RPAREN blockstatement : ID LPAREN args RPAREN SEMICOLONstatement : RETURN expression SEMICOLONstatement : IF LPAREN expression RPAREN blockstatement : IF LPAREN expression RPAREN block ELSE blockstatement : WHILE LPAREN expression RPAREN blockstatement : FOR LPAREN statement expression SEMICOLON statement RPAREN blockparams : params COMMA paramparams : paramparams : param : INT ID\n| FLOAT_TYPE IDargs : args COMMA expressionargs : expressionargs : expression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : expression LT expression\n| expression GT expression\n| expression EQ expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'INT':([0,2,3,11,22,24,25,30,31,48,63,66,68,70,71,72,73,74,75,78,80,81,83,],[4,4,-3,-2,4,-7,44,-8,-12,-9,-5,44,-11,-6,-13,4,-15,4,-10,4,-14,-4,-16,]),'FLOAT_TYPE':([0,2,3,11,22,24,25,30,31,48,63,66,68,70,71,72,73,74,75,78,80,81,83,],[6,6,-3,-2,6,-7,47,-8,-12,-9,-5,47,-11,-6,-13,6,-15,6,-10,6,-14,-4,-16,]),'ID':([0,2,3,4,6,7,11,13,14,17,20,21,22,23,24,29,30,31,32,33,34,35,36,37,38,42,44,47,48,50,63,68,70,71,72,73,74,75,78,80,81,83,],[5,5,-3,12,15,19,-2,19,19,19,19,19,5,19,-7,19,-8,-12,19,19,19,19,19,19,19,19,64,67,-9,19,-5,-11,-6,-13,5,-15,5,-10,5,-14,-4,-16,]),'RETURN':([0,2,3,11,22,24,30,31,48,63,68,70,71,72,73,74,75,78,80,81,83,],[7,7,-3,-2,7,-7,-8,-12,-9,-5,-11,-6,-13,7,-15,7,-10,7,-14,-4,-16,]),'IF':([0,2,3,11,22,24,30,31,48,63,68,70,71,72,73,74,75,78,80,81,83,],[8,8,-3,-2,8,-7,-8,-12,-9,-5,-11,-6,-13,8,-15,8,-10,8,-14,-4,-16,]),'WHILE':([0,2,3,11,22,24,30,31,48,63,68,70,71,72,73,74,75,78,80,81,83,],[9,9,-3,-2,9,-7,-8,-12,-9,-5,-11,-6,-13,9,-15,9,-10,9,-14,-4,-16,]),'FOR':([0,2,3,11,22,24,30,31,48,63,68,70,71,72,73,74,75,78,80,81,83,],[10,10,-3,-2,10,-7,-8,-12,-9,-5,-11,-6,-13,10,-15,10,-10,10,-14,-4,-16,]),'$end':([1,2,3,11,24,30,31,48,63,68,70,71,73,75,80,81,83,],[0,-1,-3,-2,-7,-8,-12,-9,-5,-11,-6,-13,-15,-10,-14,-4,-16,]),'RBRACE':([3,11,24,30,31,48,63,68,70,71,73,75,78,80,81,83,],[-3,-2,-7,-8,-12,-9,-5,-11,-6,-13,-15,-10,81,-14,-4,-16,]),'EQUALS':([5,12,15,],[13,23,29,]),'LPAREN':([5,7,8,9,10,12,13,14,17,20,21,23,24,29,30,31,32,33,34,35,36,37,38,42,48,50,63,68,70,71,73,75,80,81,83,],[14,17,20,21,22,25,17,17,17,17,17,17,-7,17,-8,-12,17,17,17,17,17,17,17,17,-9,17,-5,-11,-6,-13,-15,-10,-14,-4,-16,]),'NUMBER':([7,13,14,17,20,21,23,24,29,30,31,32,33,34,35,36,37,38,42,48,50,63,68,70,71,73,75,80,81,83,],[18,18,18,18,18,18,18,-7,18,-8,-12,18,18,18,18,18,18,18,18,-9,18,-5,-11,-6,-13,-15,-10,-14,-4,-16,]),'SEMICOLON':([12,15,16,18,19,26,43,49,51,52,53,54,55,56,57,58,59,62,],[24,30,31,-33,-34,48,63,68,70,-25,-26,-27,-28,-29,-30,-31,-32,74,]),'RPAREN':([14,18,19,24,25,27,28,30,31,39,40,41,45,46,48,52,53,54,55,56,57,58,59,63,64,67,68,69,70,71,73,75,76,79,80,81,83,],[-24,-33,-34,-7,-19,49,-23,-8,-12,59,60,61,65,-18,-9,-25,-26,-27,-28,-29,-30,-31,-32,-5,-20,-21,-11,-22,-6,-13,-15,-10,-17,82,-14,-4,-16,]),'COMMA':([14,18,19,25,27,28,45,46,52,53,54,55,56,57,58,59,64,67,69,76,],[-24,-33,-34,-19,50,-23,66,-18,-25,-26,-27,-28,-29,-30,-31,-32,-20,-21,-22,-17,]),'PLUS':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[32,-33,-34,32,32,32,32,32,32,32,-25,-26,-27,-28,32,32,32,-32,32,32,]),'MINUS':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[33,-33,-34,33,33,33,33,33,33,33,-25,-26,-27,-28,33,33,33,-32,33,33,]),'TIMES':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[34,-33,-34,34,34,34,34,34,34,34,34,34,-27,-28,34,34,34,-32,34,34,]),'DIVIDE':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[35,-33,-34,35,35,35,35,35,35,35,35,35,-27,-28,35,35,35,-32,35,35,]),'LT':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[36,-33,-34,36,36,36,36,36,36,36,-25,-26,-27,-28,-29,-30,-31,-32,36,36,]),'GT':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[37,-33,-34,37,37,37,37,37,37,37,-25,-26,-27,-28,-29,-30,-31,-32,37,37,]),'EQ':([16,18,19,26,28,39,40,41,43,51,52,53,54,55,56,57,58,59,62,69,],[38,-33,-34,38,38,38,38,38,38,38,-25,-26,-27,-28,-29,-30,-31,-32,38,38,]),'LBRACE':([60,61,65,77,82,],[72,72,72,72,72,]),'ELSE':([71,81,],[77,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,72,],[2,78,]),'statement':([0,2,22,72,74,78,],[3,11,42,3,79,11,]),'expression':([7,13,14,17,20,21,23,29,32,33,34,35,36,37,38,42,50,],[16,26,28,39,40,41,43,51,52,53,54,55,56,57,58,62,69,]),'args':([14,],[27,]),'params':([25,],[45,]),'param':([25,66,],[46,76,]),'block':([60,61,65,77,82,],[71,73,75,80,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',26),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multi','parser.py',31),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','parser.py',35),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',40),
  ('statement -> INT ID EQUALS expression SEMICOLON','statement',5,'p_statement_decl_assign','parser.py',48),
  ('statement -> FLOAT_TYPE ID EQUALS expression SEMICOLON','statement',5,'p_statement_decl_assign','parser.py',49),
  ('statement -> INT ID SEMICOLON','statement',3,'p_statement_decl','parser.py',55),
  ('statement -> FLOAT_TYPE ID SEMICOLON','statement',3,'p_statement_decl','parser.py',56),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','parser.py',62),
  ('statement -> INT ID LPAREN params RPAREN block','statement',6,'p_function_decl','parser.py',68),
  ('statement -> ID LPAREN args RPAREN SEMICOLON','statement',5,'p_statement_func_call','parser.py',79),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','parser.py',85),
  ('statement -> IF LPAREN expression RPAREN block','statement',5,'p_statement_if','parser.py',90),
  ('statement -> IF LPAREN expression RPAREN block ELSE block','statement',7,'p_statement_if_else','parser.py',94),
  ('statement -> WHILE LPAREN expression RPAREN block','statement',5,'p_statement_while','parser.py',99),
  ('statement -> FOR LPAREN statement expression SEMICOLON statement RPAREN block','statement',8,'p_statement_for','parser.py',104),
  ('params -> params COMMA param','params',3,'p_params_multiple','parser.py',113),
  ('params -> param','params',1,'p_params_single','parser.py',117),
  ('params -> <empty>','params',0,'p_params_empty','parser.py',121),
  ('param -> INT ID','param',2,'p_param','parser.py',125),
  ('param -> FLOAT_TYPE ID','param',2,'p_param','parser.py',126),
  ('args -> args COMMA expression','args',3,'p_args_multiple','parser.py',130),
  ('args -> expression','args',1,'p_args_single','parser.py',134),
  ('args -> <empty>','args',0,'p_args_empty','parser.py',138),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',143),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',145),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',146),
  ('expression -> expression LT expression','expression',3,'p_expression_cmpop','parser.py',151),
  ('expression -> expression GT expression','expression',3,'p_expression_cmpop','parser.py',152),
  ('expression -> expression EQ expression','expression',3,'p_expression_cmpop','parser.py',153),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',158),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',162),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',167),
]
